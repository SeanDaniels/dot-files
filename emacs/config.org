#+TITLE: Doom Config
#+startup: overview
* Personal Username
#+begin_src elisp
(setq user-full-name "Sean Daniels"
      user-mail-address "sdaniels8864@gmail.com")
#+end_src
* Debugging auth source
#+begin_src elisp
(setq auth-source-debug t)
#+end_src
* Font Setup
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "DejaVu Sans Mono")
;;        doom-variable-pitch-font (font-spec :family "Noto Serif" :size 13))
* Frame Setup
;;(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
* Theme Setup
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp
(setq doom-theme 'doom-material)
#+end_src
* Org Directory Setup
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
* Lambda Splash Setup
#+begin_src elisp
(defun swd-lambda-ascii-splash ()
  (let* ((banner '("⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣴⣦⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
                   "⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀"
                   "⠀⠀⠀⠀⣠⣾⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣿⣿⣶⡀⠀⠀⠀"
                   "⠀⠀⠀⣴⣿⣿⠟⠁⠀⠀⠀⣶⣶⣶⣶⡆⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⠀⠀"
                   "⠀⠀⣼⣿⣿⠋⠀⠀⠀⠀⠀⠛⠛⢻⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣧⠀"
                   "⠀⢸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡇"
                   "⠀⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿"
                   "⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡟⢹⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⣹⣿⣿"
                   "⠀⣿⣿⣷⠀⠀⠀⠀⠀⠀⣰⣿⣿⠏ ⠀⢻⣿⣿⡄⠀⠀⠀⠀⠀⠀⣿⣿⡿"
                   "⠀⢸⣿⣿⡆⠀⠀⠀⠀⣴⣿⡿⠃swd⠈⢿⣿⣷⣤⣤⡆⠀⠀⣰⣿⣿⠇"
                   "⠀⠀⢻⣿⣿⣄⠀⠀⠾⠿⠿⠁⠀   ⠀⠘⣿⣿⡿⠿⠛⠀⣰⣿⣿⡟⠀"
                   "⠀⠀⠀⠻⣿⣿⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⠏⠀⠀"
                   "⠀⠀⠀⠀⠈⠻⣿⣿⣷⣤⣄⡀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⠟⠁⠀⠀⠀"
                   "⠀⠀⠀⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀"
                   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⠛⠛⠛⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'swd-lambda-ascii-splash)
#+end_src

* Mu4e Settings
#+begin_src elisp
(set-email-account! "work"
                    '((mu4e-sent-folder . "/work/Sent Items")
                      (mu4e-drafts-folder . "/work/Drafts" )
                      (mu4e-trash-folder . "/work/Deleted Items")))

#+end_src
